#!/bin/bash
#
# This script checks if a MySQL server should take part in a pool, based on its role and its lag
#

. /opt/mysql-haproxy-xinetd/scripts/xinetd-helper

LOCKFILE=/opt/mysql-haproxy-xinetd/cache.lock
CACHE_FILE=/opt/mysql-haproxy-xinetd/cache
CACHE_TTL_MIN="-1" # this should be with a minus sign to indicate that we care about a file updated less than this many minutes ago (+ means more than X minutes ago).

# manual override:
if [ -f /etc/xinetd-mysql/mysql-force-error-ro-pool-hint ] ; then
  http_503 "Forced hard out of pool. $(cat /etc/xinetd-mysql/mysql-force-error-ro-pool-hint)"
fi
if [ -f /etc/xinetd-mysql/mysql-force-into-ro-pool-hint ] ; then
  http_200 "Forced into pool. $(cat /etc/xinetd-mysql/mysql-force-into-ro-pool-hint)"
fi
if [ -f /etc/xinetd-mysql/mysql-force-outside-ro-pool-hint ] ; then
  http_404 "Forced out of pool. $(cat /etc/xinetd-mysql/mysql-force-outside-ro-pool-hint)"
fi

# Begin with should-or-should-not even consider to be in pool checks:
if [ -f /etc/xinetd-mysql/mysql-master-hint ] ; then
  http_404 "Master: disabled"
fi

if [ -f /etc/xinetd-mysql/mysql-delayed-hint ] ; then
  http_404 "Delayed server: disabled"
fi

absolute_lag=""
if test `find $CACHE_FILE -mmin $CACHE_TTL_MIN`; then
  cached_lag=$(cat "$CACHE_FILE")
  if [[ "$cached_lag" =~ ^-?[0-9]+$ ]]; then
    absolute_lag="$cached_lag"
  fi
fi

if [ "$absolute_lag" == "" ]; then
  # Proceed to lag specific checks
  absolute_lag=$(/usr/bin/mysql -umonitor -pmonitor -e "SHOW SLAVE STATUS\G"| grep "Seconds_Behind_Master" | awk '{ print $2 }')
  exit_code=$?

  if [ "$exit_code" != "0" ] ; then
    http_503 "MySQL error"
  fi

  if [ -e ${LOCKFILE} ] && kill -0 `cat ${LOCKFILE}`; then
    : # if this instance cannot get a lock, don't worry about writing to the file and use the absolute lag value we have now.
  else
    trap "rm -f ${LOCKFILE}; exit" INT TERM EXIT
    echo $$ > ${LOCKFILE}
    echo "$absolute_lag" > "$CACHE_FILE"
    rm -f ${LOCKFILE}
  fi
fi

acceptable_lag=300

if [ $absolute_lag -gt $acceptable_lag ] ; then
  http_503 "MySQL lagging"
fi

if [ $absolute_lag -le $acceptable_lag ] ; then
  http_200 "Lag OK"
fi

http_503 "Unexpected error"


